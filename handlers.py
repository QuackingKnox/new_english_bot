from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import CallbackQuery
from locals import LOCALS
from database import (
    get_user,
    add_user,
    update_user_language,
    update_preferences,
    save_selected_words_to_db,
    get_user_stats
)
from keyboards import (
    generate_language_keyboard,
    generate_words_keyboard,
    generate_notifications_keyboard,
    main_menu_keyboard,
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from config import ADMIN_ID


selected_words_dict = {}  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id -> set)


async def send_welcome(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id
    username = message.from_user.username

    user = await get_user(user_id)

    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
        await add_user(user_id, username)
        await message.answer(
            LOCALS["en"]["start_welcome"],
            reply_markup=generate_language_keyboard(stage="native", user_lang="en")
        )
    else:
        lang = user[1] if user[1] else "en"  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        learned_words, total_words, active_words, days_learning, progress = await get_user_stats(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = LOCALS[lang]["stats_message"].format(
            learned=learned_words,
            total=total_words,
            active=active_words,
            days=days_learning,
            progress=progress
        )

        await message.answer(
            stats_message,
            reply_markup=main_menu_keyboard(lang)
        )


async def set_native_language(call: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π."""
    user_id = call.from_user.id
    selected_option = call.data.split("_")[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "native_ru"

    if selected_option == "skip":
        native_lang = "en"  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—ã–±–æ—Ä, —Å—Ç–∞–≤–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    elif selected_option == "confirm":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        user = await get_user(user_id)
        native_lang = user[1] if user else "en"
        await call.message.edit_text(
            LOCALS[native_lang]["start_choose_learning"],
            reply_markup=generate_language_keyboard(stage="learning", user_lang=native_lang)
        )
        return
    else:
        native_lang = selected_option

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_language(user_id, native_lang)
    await call.message.edit_text(
        LOCALS[native_lang]["start_welcome"],  # –¢–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ —Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
        reply_markup=generate_language_keyboard(selected_lang=native_lang, stage="native", user_lang=native_lang)
    )


async def set_learning_language(call: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫, –Ω–æ –ù–ï –º–µ–Ω—è–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    user_id = call.from_user.id
    selected_option = call.data.split("_")[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "learning_es"

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UI —è–∑—ã–∫) –∏ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
    user = await get_user(user_id)

    if not user:
        return

    ui_lang = user[1]  # UI —è–∑—ã–∫ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    learning_lang = user[2] if user[2] else "en"  # –Ø–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if selected_option == "confirm":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤
        await call.message.edit_text(
            LOCALS[ui_lang]["choose_words"],
            reply_markup=generate_words_keyboard(set(), ui_lang=ui_lang, learning_lang=learning_lang)
        )
        return

    if selected_option == "skip":
        learning_lang = user[1] if user else "en"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑—É—á–∞–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
    else:
        learning_lang = selected_option

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –≤ –ë–î (–Ω–æ UI —è–∑—ã–∫ –ù–ï –º–µ–Ω—è–µ–º!)
    await update_user_language(user_id, learning_lang, native=False)

    await call.message.edit_text(
        LOCALS[ui_lang]["start_choose_learning"],  # UI –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ
        reply_markup=generate_language_keyboard(selected_lang=learning_lang, stage="learning", user_lang=ui_lang)
    )


async def select_word(call: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –Ω–µ –º–µ–Ω—è—è —è–∑—ã–∫."""
    user_id = call.from_user.id
    data_parts = call.data.split("_")
    word = "_".join(data_parts[1:-1])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π
    page = int(data_parts[-1])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    user = await get_user(user_id)
    if not user:
        return

    ui_lang = user["ui_lang"]
    learning_lang = user["learning_lang"]

    # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_words = selected_words_dict.setdefault(user_id, set())

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ
    if word in selected_words:
        selected_words.remove(word)
    else:
        selected_words.add(word)

    await call.message.edit_reply_markup(
        reply_markup=generate_words_keyboard(selected_words, page, ui_lang=ui_lang, learning_lang=learning_lang)
    )



async def next_page(call: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è."""
    page = int(call.data.split("_")[2])
    user_id = call.from_user.id
    user = await get_user(user_id)

    if not user:
        return

    ui_lang = user["ui_lang"]
    learning_lang = user["learning_lang"]

    # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_words = selected_words_dict.setdefault(user_id, set())

    await call.message.edit_text(
        LOCALS[ui_lang]["choose_words"],
        reply_markup=generate_words_keyboard(selected_words, page, ui_lang=ui_lang, learning_lang=learning_lang)
    )



async def confirm_words(call: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä."""
    user_id = call.from_user.id
    user = await get_user(user_id)

    if not user:
        return

    ui_lang = user["ui_lang"]
    learning_lang = user["learning_lang"]

    # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_words = selected_words_dict.get(user_id, set())

    if not selected_words:
        await call.answer(LOCALS[ui_lang]["no_words_selected"], show_alert=True)
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –ë–î
    await save_selected_words_to_db(user_id, selected_words, learning_lang, ui_lang)

    await call.message.edit_text(
        LOCALS[ui_lang]["confirm_words_message"],
        reply_markup=generate_notifications_keyboard(ui_lang)
    )

    # ‚úÖ –ß–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    selected_words_dict.pop(user_id, None)



async def finish_word_selection(call: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤."""
    user_id = call.from_user.id
    user = await get_user(user_id)
    user_lang = user[1] if user else "en"

    await call.message.edit_text(
        LOCALS[user_lang]["select_words_done"],
        reply_markup=generate_notifications_keyboard(user_lang)  # –í—ã–∑–æ–≤ –≥–æ—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )


async def set_notifications(call: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = call.from_user.id
    times_per_day = int(call.data.split("_")[1])

    await update_preferences(user_id, times_per_day)

    user = await get_user(user_id)
    user_lang = user[1] if user else "en"

    await call.message.edit_text(LOCALS[user_lang]["setup_complete"])

class SupportState(StatesGroup):
    waiting_for_question = State()
    waiting_for_reply = State()


async def help_info(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user = get_user(callback.from_user.id)
    language = user[5] if user else "ru"

    keyboard = create_inline_menu(language, section="support")
    await callback.message.edit_text(LANGUAGES[language]["support_info_message"], reply_markup=keyboard)
    await callback.answer()



async def receive_support_message(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user = get_user(message.from_user.id)
    language = user[5] if user else "ru"

    admin_message = (
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} ({message.from_user.id})\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å: {message.text}"
    )

    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
    )

    await bot.send_message(ADMIN_ID, admin_message, reply_markup=keyboard)
    await message.answer(LANGUAGES[language]["question_received_message"])


async def process_admin_reply(callback: types.CallbackQuery, state: FSMContext):
    """–§–∏–∫—Å–∏—Ä—É–µ–º, –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω"""
    user_id = int(callback.data.split("_")[1])
    await state.update_data(user_id=user_id)
    await AdminReply.waiting_for_reply.set()

    await callback.message.answer(f"‚úç –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    await callback.answer()


async def handle_admin_reply(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –µ–≥–æ —è–∑—ã–∫–∞"""
    data = await state.get_data()
    user_id = data.get("user_id")

    if user_id:
        user = await get_user(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π get_user()
        language = user["ui_lang"] if user else "ru"  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–≤–∏–º "ru" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        try:
            await bot.send_message(user_id, f"{LOCALS[language]['admin_reply_message']}\n{message.text}")
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

    await state.finish()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤."""

    def register_handlers(dp: Dispatcher):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.register_message_handler(send_welcome, commands=["start"])
        dp.register_message_handler(receive_support_message, content_types=types.ContentTypes.TEXT)
        dp.register_message_handler(handle_admin_reply, state=AdminReply.waiting_for_reply,
                                    content_types=types.ContentTypes.TEXT)

        # Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã
        dp.register_callback_query_handler(set_native_language, lambda c: c.data.startswith("native_"))
        dp.register_callback_query_handler(set_learning_language, lambda c: c.data.startswith("learning_"))
        dp.register_callback_query_handler(select_word, lambda c: c.data.startswith("word_"))
        dp.register_callback_query_handler(next_page, lambda c: c.data.startswith("next_page_"))
        dp.register_callback_query_handler(confirm_words, lambda c: c.data == "words_confirm")
        dp.register_callback_query_handler(finish_word_selection, lambda c: c.data == "words_finish")
        dp.register_callback_query_handler(set_notifications, lambda c: c.data.startswith("notify_"))
        dp.register_callback_query_handler(process_admin_reply, lambda c: c.data.startswith("reply_"), state="*")



