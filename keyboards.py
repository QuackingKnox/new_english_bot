from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from locals import LOCALS

AVAILABLE_LANGUAGES = {
    "en": "English üá¨üáß",
    "ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
    "es": "Espa√±ol üá™üá∏",
    "pt": "Portugu√™s üáµüáπ",
    "fr": "Fran√ßais üá´üá∑"
}


def generate_language_keyboard(selected_lang=None, stage="native", user_lang="en"):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ –∏–ª–∏ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞.
    - selected_lang: –∫–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - stage: "native" (—Ä–æ–¥–Ω–æ–π —è–∑—ã–∫) –∏–ª–∏ "learning" (–∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫)
    - user_lang: —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "en")
    """
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —è–∑—ã–∫–∞–º–∏
    for code, name in AVAILABLE_LANGUAGES.items():
        if selected_lang == code:
            name += " ‚úÖ"  # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É
        keyboard.add(InlineKeyboardButton(name, callback_data=f"{stage}_{code}"))

    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–î–∞–ª–µ–µ"
    skip_text = LOCALS[user_lang]["button_skip"]
    next_text = LOCALS[user_lang]["button_next"]

    if selected_lang:
        keyboard.add(InlineKeyboardButton(next_text, callback_data=f"{stage}_confirm"))
    else:
        keyboard.add(InlineKeyboardButton(skip_text, callback_data=f"{stage}_skip"))

    return keyboard


def main_menu_keyboard(user_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —à–∏—Ä–æ–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardMarkup(row_width=1)  # ‚úÖ 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É –¥–ª—è —à–∏—Ä–∏–Ω—ã

    texts = LOCALS[user_lang]  # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ

    keyboard.add(InlineKeyboardButton(texts["menu_dict"], callback_data="dict"))
    keyboard.add(InlineKeyboardButton(texts["menu_subscription"], callback_data="subscription"))
    keyboard.add(InlineKeyboardButton(texts["menu_invite"], callback_data="invite"))
    keyboard.add(InlineKeyboardButton(texts["menu_support"], callback_data="support"))

    return keyboard


def generate_words_keyboard(selected_words, page=0, ui_lang="en", learning_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ (–ø–æ 8 —Å–ª–æ–≤, —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞–ª–µ–µ' –∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å')."""
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –ë–µ—Ä—ë–º —Å–ª–æ–≤–∞ –Ω–∞ —è–∑—ã–∫–µ –∏–∑—É—á–µ–Ω–∏—è
    words = LOCALS[learning_lang]["word_set"][min(page, len(LOCALS[learning_lang]["word_set"]) - 1)]

    for word in words:
        is_selected = "‚úÖ " if word in selected_words else ""
        keyboard.add(InlineKeyboardButton(is_selected + word, callback_data=f"word_{word}_{page}"))

    # üî• –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if page < 4:  # –ù–∞ –ø–µ—Ä–≤—ã—Ö 4 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –µ—Å—Ç—å "–î–∞–ª–µ–µ"
        keyboard.add(InlineKeyboardButton(LOCALS[ui_lang]["button_next"], callback_data=f"next_page_{page + 1}"))

    # ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" (–¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å "words_confirm")
    keyboard.add(InlineKeyboardButton("‚úÖ " + LOCALS[ui_lang]["button_finish"], callback_data="words_confirm"))

    return keyboard


def generate_notifications_keyboard(user_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton(LOCALS[user_lang]["notify_3"], callback_data="notify_3"),
        InlineKeyboardButton(LOCALS[user_lang]["notify_6"], callback_data="notify_6"),
        InlineKeyboardButton(LOCALS[user_lang]["notify_12"], callback_data="notify_12")
    )