from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from locals import LOCALS

AVAILABLE_LANGUAGES = {
    "en": "English üá¨üáß",
    "ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
    "es": "Espa√±ol üá™üá∏",
    "pt": "Portugu√™s üáµüáπ",
    "fr": "Fran√ßais üá´üá∑"
}

def generate_language_keyboard(selected_lang=None, stage="native", user_lang="en"):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(
            name + (" ‚úÖ" if code == selected_lang else ""),
            callback_data=f"{stage}_{code}"
        )
        for code, name in AVAILABLE_LANGUAGES.items()
    ]
    keyboard.add(*buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–î–∞–ª–µ–µ"
    keyboard.add(InlineKeyboardButton(LOCALS[user_lang]["button_skip"], callback_data=f"{stage}_skip"))
    if selected_lang:
        keyboard.add(InlineKeyboardButton(LOCALS[user_lang]["button_next"], callback_data=f"{stage}_confirm"))

    return keyboard

def main_menu_keyboard(user_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(LOCALS[user_lang]["menu_dict"]),
        KeyboardButton(LOCALS[user_lang]["menu_subscription"]),
        KeyboardButton(LOCALS[user_lang]["menu_invite"]),
        KeyboardButton(LOCALS[user_lang]["menu_support"])
    )

def generate_words_keyboard(selected_words, page=0, ui_lang="en", learning_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ (–ø–æ 8 —Å–ª–æ–≤, —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞–ª–µ–µ' –∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å')."""
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –ë–µ—Ä—ë–º —Å–ª–æ–≤–∞ –Ω–∞ —è–∑—ã–∫–µ –∏–∑—É—á–µ–Ω–∏—è
    words = LOCALS[learning_lang]["word_set"][min(page, len(LOCALS[learning_lang]["word_set"]) - 1)]

    for word in words:
        is_selected = "‚úÖ " if word in selected_words else ""
        keyboard.add(InlineKeyboardButton(is_selected + word, callback_data=f"word_{word}_{page}"))

    # üî• –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if page < 4:  # –ù–∞ –ø–µ—Ä–≤—ã—Ö 4 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –µ—Å—Ç—å "–î–∞–ª–µ–µ"
        keyboard.add(InlineKeyboardButton(LOCALS[ui_lang]["button_next"], callback_data=f"next_page_{page + 1}"))

    # ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" (–¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å "words_confirm")
    keyboard.add(InlineKeyboardButton("‚úÖ " + LOCALS[ui_lang]["button_finish"], callback_data="words_confirm"))

    return keyboard


def generate_notifications_keyboard(user_lang="en"):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton(LOCALS[user_lang]["notify_3"], callback_data="notify_3"),
        InlineKeyboardButton(LOCALS[user_lang]["notify_6"], callback_data="notify_6"),
        InlineKeyboardButton(LOCALS[user_lang]["notify_12"], callback_data="notify_12")
    )

def get_reply_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton("‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
    keyboard.add(button)
    return keyboard